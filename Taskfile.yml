# https://taskfile.dev

version: '3'

vars:
  # Path for cloning the oeisdata repository
  OEISDATA_PATH: "{{.HOME}}/repos/oeisdata"
  # Path to results from oeis.py
  RESULT_FILE: "/tmp/oeis_results_all.json"
  # Path to results from oeis.py (includes python)
  PYTHON_RESULT_FILE: "/tmp/oeis_python_results_all.json"
  # Path to location of `solutions` file
  SOLUTIONS_FILE_PATH: "{{.HOME}}/Downloads/solutions"
  # Path to directory for Lean files (defaults to `Sequencelib/Synthetic`)
  OUTPUT_DIR: ""
  # Number of sequences to process
  MAX_SEQUENCES: 0
  # Start parameter for synthesize.py
  START: 0
  # End parameter for synthesize.py
  END: 10

tasks:
  build:
    desc: Build the library
    cmds:
      - lake build
    deps:
      - get-cache

  lint:
    desc: Run linter
    cmds:
      - lake lint
    deps:
      - get-cache
      - build

  build-docs:
    desc: Build docs
    run: once
    sources:
      - ./**/*.lean
      - ./**/lakefile.toml
      - ./scripts/update_docs.py
      - ./scripts/values.html.j2
      - ./scripts/doc_index.html.j2
      - exclude: ./**/.lake
    generates:
      - .lake/build/doc/Sequencelib.html
      - home_page/sequences.md
    cmds:
      - DOCGEN_SRC="file" lake -R -Kenv=dev build Sequencelib:docs
      - python scripts/update_docs.py
    deps:
      - get-cache

  serve-docs:
    desc: Serve docs
    cmds:
      - python -m webbrowser file:///$(pwd)/.lake/build/doc/Sequencelib.html
    deps:
      - build-docs

  build-blueprint:
    desc: Build blueprint
    sources:
      - blueprint/src/content.tex
      - blueprint/src/chapter/*.tex
      - exclude: blueprint/print/**/*
      - exclude: blueprint/web/**/*
    generates:
      - blueprint/print/print.pdf
      - blueprint/web/index.html
    cmds:
      - leanblueprint pdf
      # For some reason, leanblueprint web generates files without write permissions,
      # so we need to delete any previous run.
      - rm -rf blueprint/web
      - leanblueprint web
    deps:
      - build-docs

  build-page:
    desc: Build full home page
    sources:
      - ./**/*.lean
      - ./lakefile.toml
      - blueprint/src/*
      - home_page/**/*
      - exclude: home_page/_site/**/*
      - exclude: home_page/blueprint/**/*
      - exclude: home_page/blueprint.pdf
      - exclude: home_page/docs/**/*
    generates:
      - home_page/_site/index.html
      - home_page/sequences.md
    cmds:
      - cp blueprint/print/print.pdf home_page/blueprint.pdf
      - rsync -av blueprint/web/ home_page/blueprint/
      - rsync -av .lake/build/doc/ home_page/docs
      - cd home_page && bundle install && bundle exec jekyll build
    deps:
      - build-docs
      - build-blueprint

  serve-page:
    desc: Serve full home page
    cmds:
      - cd home_page && bundle install && bundle exec jekyll serve
    deps:
      - build-page

  get-cache-for-dir:
    internal: true
    run: once
    dir: '{{.DIR | default "." }}'
    cmds:
      - lake exe cache get
    status:
      - test -f .lake/packages/mathlib/.lake/build/lib/lean/Mathlib.olean
  
  get-cache:
    desc: Ensure Mathlib cache is available
    cmds:
      - for: ["."]
        task: get-cache-for-dir
        vars:
          DIR: '{{ .ITEM }}'

  update-nolints:
    desc: Update nolints
    cmds:
      - lake exe batteries/runLinter --update

  render-sequencelib-lean:
    desc: Regenerate top-level Sequencelib.lean
    cmds:
      - python scripts/generate_imports.py
    sources:
      - Sequencelib/**/*.lean
      - exclude: Sequencelib/Meta/**/*.lean
      - exclude: Sequencelib/Defs/**/*.lean
    generates:
      - Sequencelib.lean

  ensure-oeisdata:
    desc: Ensure there is a local clone of oeisdata
    run: once
    cmds:
      - git clone git@github.com:oeis/oeisdata.git {{.OEISDATA_PATH}}
    status:
      - test -d {{.OEISDATA_PATH}}/.git

  # ensure-solutions:
  #   cmds:
  #     - # fetch solutions

  oeis-py:
    desc: Run oeis.py
    cmds:
      - python scripts/oeis.py
    env:
      OEIS_INSTALL: "{{.OEISDATA_PATH}}"
      RESULT_FILE: "{{.RESULT_FILE}}"
      PYTHON_RESULT_FILE: "{{.PYTHON_RESULT_FILE}}"
      MAX_SEQUENCES: "{{.MAX_SEQUENCES}}"
    sources:
      - scripts/oeis.py
    generates:
      - "{{.RESULT_FILE}}"
      - "{{.PYTHON_RESULT_FILE}}"
    deps:
      - ensure-oeisdata

  synthesize-py:
    desc: Run synthesize.py
    cmds:
      - python scripts/synthesize.py -s {{.START}} -e {{.END}}
    env:
      ALL_OEIS_RESULTS_FILE: "{{.RESULT_FILE}}"
      SOLUTIONS_FILE_PATH: "{{.SOLUTIONS_FILE_PATH}}"
      OUTPUT_DIR: "{{.OUTPUT_DIR}}"
    sources:
      - scripts/synthesize.py
      - scripts/oeis.py
      - "{{.RESULT_FILE}}"
      - "{{.SOLUTIONS_FILE_PATH}}"
    generates:
      - Sequencelib/Synthetic/*.lean
    deps:
      - oeis-py
      - ensure-oeisdata